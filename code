import cv2
import mediapipe as mp
import math
import numpy as np
mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils

face_mesh = mp_face_mesh.FaceMesh(
    max_num_faces=2,
    refine_landmarks=True,
    min_detection_confidence=0.7,
    min_tracking_confidence=0.6
)
def calculate_distance(id1, id2):
    mp_face_mesh = mp.solutions.face_mesh
    mp_drawing = mp.solutions.drawing_utils

    face_mesh = mp_face_mesh.FaceMesh(
        max_num_faces=2,
        refine_landmarks=True,
        min_detection_confidence=0.7,
        min_tracking_confidence=0.6
    )

    for face_landmarks in results.multi_face_landmarks:
        for landmark in face_landmarks.landmark:
            landmarkOne = face_landmarks.landmark[id1-1]
            landmarkTwo = face_landmarks.landmark[id2-1]
            distance = math.sqrt((landmarkOne.x * 640 - landmarkTwo.x * 640) ** 2 +
                                 (landmarkOne.y * 480 - landmarkTwo.y * 480) ** 2 +
                                 (landmarkOne.z - landmarkTwo.z) ** 2)
    return distance

webcam = cv2.VideoCapture(0)
while webcam.isOpened():
    success, img = webcam.read()

    # Applying face mesh model using MediaPipe
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(img_rgb)

    # Draw annotations on the image
    if results.multi_face_landmarks:
        for face_landmarks in results.multi_face_landmarks:

            # center of cropped zone
            center_face = face_landmarks.landmark[4]
            x, y, z = center_face.x, center_face.y, center_face.z
            mapped_x = int(x * 640)
            mapped_y = int(y * 480)
            # Draw a rectangle centered at the mapped (x, y) position
            rectangle_width, rectangle_height = 200, 300
            top_left = ((int(mapped_x - rectangle_width / 2)), int(mapped_y - rectangle_height / 2))
            bottom_right = (int(mapped_x + rectangle_width / 2), int(mapped_y + rectangle_height / 2))
            cv2.rectangle(img, top_left, bottom_right, (0, 255, 0), 2)

            # Crop the region within the rectangle and display and show in a new window
            cropped_region = img[top_left[1]:bottom_right[1], top_left[0]:bottom_right[0]]
            cv2.imshow("Cropped Region", cropped_region)

            # draw point and number in the face
            for i, landmark in enumerate(face_landmarks.landmark):
                x, y, z = landmark.x, landmark.y, landmark.z
                image_height, image_width, _ = img.shape
                imapped_x = int(x * image_width)
                imapped_y = int(y * image_height)
                if i + 1 == 1:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 19:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 62:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 106:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 145:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 160:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 293:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 335:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 375:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)
                if i + 1 == 387:
                    cv2.putText(img, f"{i + 1}", (imapped_x, imapped_y), cv2.FONT_HERSHEY_SIMPLEX, 0.3, (0, 255, 0), 1,
                                cv2.LINE_AA)
                    cv2.circle(img, (imapped_x, imapped_y), 2, (0, 0, 255), -1)

    # check gesture
    top_region = np.ones((50, 640, 3), dtype=np.uint8) * 255

    if calculate_distance(62,293) >80 :
        cv2.putText(top_region, "Yes", (20,40), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0),
                    2, cv2.LINE_AA)
    elif calculate_distance(1,19) >50 and calculate_distance(106,160) <30 and calculate_distance(335,387) <30:
        cv2.putText(top_region, "No", (20,40), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0),
                    2, cv2.LINE_AA)
    elif calculate_distance(145,160) <10 :
        cv2.putText(top_region, "Eat", (20,40), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0),
                    2, cv2.LINE_AA)
    elif calculate_distance(387,375) <10 :
        cv2.putText(top_region, "Toilet", (20,40), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0),
                    2, cv2.LINE_AA)
    elif calculate_distance(1,19) >40 and calculate_distance(106,160) >33 and calculate_distance(335,387) >33:
        cv2.putText(top_region, "Emergency", (20,40), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 255),
                    2, cv2.LINE_AA)
    else :
        cv2.putText(top_region, "Normal", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 255, 0),
                    2, cv2.LINE_AA)
    distance = calculate_distance(335,387)
    print(distance)
    # Display the result with annotations
    result = np.vstack((top_region, img))
    cv2.imshow("Koolac", result)

    # Check for the 'q' key press to exit the loop
    if cv2.waitKey(20) & 0xFF == ord("q"):
        break

# Release the webcam and close all OpenCV windows
webcam.release()
cv2.destroyAllWindows()


